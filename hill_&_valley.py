# -*- coding: utf-8 -*-
"""hill & valley.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nI4ejVAJj0-HEzjyt4rbLPWMPrD_kJfN

HILL AND VALLEY PREDICTION USING LOGISTICS **REGRESSION**

**Get Understanding about data set**

 each records represent 100 points on a two dimentional graph.when plotted in order(from 1 through 100) as the y coordinate,the points will create either a hill(a"bump" in the terrain) or a valley (a "dip" in the terrain).see the original source for some examples of these graphs .
 1-100: labeled 'v##',floating point values (numeric),the X-values.
 101:labeled "class". binary(0,1) representing(valley,hill)

**Import library**
"""

import pandas as pd

hill=pd.read_csv('https://github.com/YBI-Foundation/Dataset/raw/main/Hill%20Valley%20Dataset.csv')

"""**get the first five rows of dataframe**"""

hill.head()

hill.info()

hill.describe()

hill.columns

print(hill.columns.tolist())

hill.shape

"""**Get Unique Values (class or Label) in y Variable**"""

hill['Class'].value_counts()

hill.groupby('Class').mean()

"""**Define y (dependent or label or target variable) and x(independent or features or attributes variable)**"""

y=hill['Class']

y.shape

y

x=hill.drop('Class',axis=1)

x.shape

x

"""**Get Plot of First Two Rows**"""

import matplotlib.pyplot as plt

plt.plot(x.iloc[0,:])
plt.title('Valley');

"""**Get X Varibles Standardized**:"""

from sklearn.preprocessing import StandardScaler

ss=StandardScaler()

X=ss.fit_transform(x)

X

x.shape

"""**Get Train Test split**:"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y, train_size=0.3, stratify=y, random_state=2529)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

"""**Get Model Train**:"""

from sklearn.linear_model import LogisticRegression

lr=LogisticRegression()

lr.fit(X_train,y_train)

"""**Get Model Prediction**:"""

y_pred=lr.predict(X_test)

y_pred.shape

y_pred

lr.predict_proba(X_test)

"""**Get Model Evaluation:**"""

from sklearn.metrics import confusion_matrix, classification_report

print(confusion_matrix(y_test,y_pred))

print(classification_report(y_test,y_pred))

"""**Get Future Prediction**:"""

X_new=hill.sample(1)

X_new

X_new.shape

X_new=X_new.drop('Class',axis=1)

X_new

X_new.shape

X_new=ss.fit_transform(X_new)

y_pred_new=lr.predict(X_new)

y_pred_new

lr.predict_proba(X_new)